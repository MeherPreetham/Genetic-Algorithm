# Cell 1.
!pip install deap
import time, math, copy, random
import matplotlib.pyplot as plt
from statistics import mean, pstdev
from deap import base, creator, tools

# Cell 2.
#@title GA Parameters
NUM_TASKS        = 1000      # @param {type:"integer"}
NUM_CORES        = 16       # @param {type:"integer"}
NUM_POPULATION   = 200       # @param {type:"integer"}
NUM_GENERATIONS  = 500      # @param {type:"integer"}
CROSSOVER_RATE   = 0.8       # @param {type:"number"}
MUTATION_RATE    = 0.2       # @param {type:"number"}
BASE_ENERGY      = 0.01      # @param {type:"number"}
IDLE_ENERGY      = 0.01      # @param {type:"number"}
STAGNATION_LIMIT = 50        # @param {type:"number"}
SEED             = 42        # @param {type:"integer"}

# Cell 3.
# 1 Generating individuals in a population.
random.seed(SEED)

execution_times  = [random.randint(1,10) for _ in range(NUM_TASKS)]

try:
  creator.create("FitnessMin", base.Fitness, weights=(-1.0,))
  creator.create("Individual", list, fitness = creator.FitnessMin)
except RuntimeError:
  pass

def gene(NUM_TASKS, NUM_CORES, NUM_POPULATION):
  toolbox = base.Toolbox()
  toolbox.register("attr_core", random.randint, 0, NUM_CORES-1)
  toolbox.register("individual", tools.initRepeat, creator.Individual, toolbox.attr_core, n = NUM_TASKS)
  toolbox.register("population", tools.initRepeat, list, toolbox.individual, n = NUM_POPULATION)

  return toolbox

toolbox = gene(NUM_TASKS, NUM_CORES, NUM_POPULATION)
population = toolbox.population()
chromosome = toolbox.individual()

print("==============GENERATING AN INDIVIDUAL==============")
print("Sample task-to-core mapping (first 10 tasks):")
print(chromosome[:min(10, NUM_TASKS)])
print("\n")
for i, core in enumerate(chromosome[:min(10, NUM_TASKS)]):
  print(f"Task {i} → Core {core} | Execution Time: {execution_times[i]} ms")
print("====================================================")

# Cell 4.
TOTAL_EXEC    = sum(execution_times)
MEAN_LOAD     = TOTAL_EXEC / NUM_CORES if NUM_CORES > 0 else 1e-9
MAX_MAKESPAN  = TOTAL_EXEC
MAX_ENERGY    = TOTAL_EXEC * BASE_ENERGY

# Weights.
W_MAKESPAN = 0.4
W_ENERGY = 0.2
W_IMBALANCE = 0.4

def evaluate(chromosome):
    # 1) Per-core total time & energy.
    core_times  = [0.0]*NUM_CORES
    core_energy = [0.0]*NUM_CORES

    for t_idx, core in enumerate(chromosome):
        t = execution_times[t_idx]
        core_times[core]  += t
        core_energy[core] += t * BASE_ENERGY

    makespan = max(core_times) # worst-loaded core time.

    active_energy = sum(ct* BASE_ENERGY for ct in core_times)
    idle_energy = sum((makespan - ct) * IDLE_ENERGY for ct in core_times)
    total_energy = active_energy + idle_energy

    # 2 Imbalance via coefficient of variation.
    imbalance = pstdev(core_times) / MEAN_LOAD if TOTAL_EXEC > 0 else 0.0

    # 3 Normalized objectives
    nm = min(makespan / MAX_MAKESPAN, 1.0)
    ne = min(total_energy / MAX_ENERGY, 1.0)
    ni = min(imbalance, 1.0)

    # 4 Combined fitness (we want to MAXIMIZE this).
    score = (W_MAKESPAN*nm + W_ENERGY*ne + W_IMBALANCE*ni)

    # 5 Diagnostics on the individual.
    chromosome.core_times     = core_times
    chromosome.total_energy   = total_energy
    chromosome.makespan       = makespan
    chromosome.imbalance      = imbalance
    chromosome.fitness_value  = score

    return (score,)

# Registering it.
toolbox.register("evaluate", evaluate)


# Cell 5.
# 3 Genetic Operators (crossover, mutation, and selection).

random.seed(SEED)

toolbox.register("mate", tools.cxUniform, indpb = CROSSOVER_RATE)
toolbox.register("mutate", tools.mutUniformInt, low=0, up=NUM_CORES-1, indpb= MUTATION_RATE)
toolbox.register("select", tools.selTournament, tournsize=3)
toolbox.register("clone", copy.deepcopy)

population = toolbox.population(n = NUM_POPULATION)
for ind in population:
  ind.fitness.values = toolbox.evaluate(ind)

hall = tools.HallOfFame(1)
best_per_gen = []
avg_per_gen = []
std_per_gen   = []
stagnation    = 0
best_so_far   = max(ind.fitness.values[0] for ind in population)

start_time = time.time()

LOG_INTERVAL = 10 # Printing the best generations every 10 generations.
for gen in range(1, NUM_GENERATIONS + 1):
  hall.update(population)
  current_best = hall[0].fitness.values[0]
  if current_best < best_so_far:
    best_so_far = current_best
    stagnation = 0
  else:
    stagnation += 1

  # Early stop if no improvement.
  if stagnation >= STAGNATION_LIMIT:
    print(f"Early stopping at generation {gen}.")
    break

  # 3.1 select & clone.
  offspring = list(map(toolbox.clone, toolbox.select(population, len(population))))

  # 3.2 Crossover.
  for child1, child2 in zip(offspring[::2], offspring[1::2]):
    if random.random() < CROSSOVER_RATE:
      toolbox.mate(child1, child2)
      del child1.fitness.values, child2.fitness.values

  # 3.3 Mutation.
  for mutant in offspring:
    if random.random() < MUTATION_RATE:
      toolbox.mutate(mutant)
      del mutant.fitness.values

  # 3.4 evaluating any individuals with invalid fitness.
  invalids = [ch for ch in offspring if not ch.fitness.valid]
  for ch in invalids:
    ch.fitness.values = toolbox.evaluate(ch)

  # Elitism
  offspring[0] = hall[0]

  # 3.5 replacing old population.
  population[:] = offspring

  fits = [ind.fitness.values[0] for ind in population]
  best_per_gen.append(max(fits))
  avg_per_gen.append(mean(fits))
  std_per_gen.append(pstdev(fits))

  # 3.6 Logging.
  if gen % LOG_INTERVAL == 0 or gen == NUM_GENERATIONS:
     print(f"Gen {gen:4d} → Best={best_per_gen[-1]:.3f} | "
              f"Avg={avg_per_gen[-1]:.3f} | Std={std_per_gen[-1]:.3f}")

elapsed = time.time() - start_time

# 3.7 Final best solution.
best = hall[0]
print("\n=== FINAL BEST SOLUTION ===")
print(f"Total time       : {elapsed:.2f}s")
print(f"Best fitness     : {best.fitness.values[0]:.3f}")
print(f"Chromosome[:10]  : {best[:10]} …")
print(f"Makespan         : {best.makespan:.2f} ms")
print(f"Total energy (J) : {best.total_energy:.3f}")
print(f"Imbalance        : {best.imbalance:.3f}")

plt.plot(best_per_gen, label="Best")
plt.plot(avg_per_gen,  label="Average")
plt.xlabel("Generation"); plt.ylabel("Fitness")
plt.legend()
plt.show()
plt.tight_layout()
